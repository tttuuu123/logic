/* 
  给你一个浮点数 hour ，表示你到达办公室可用的总通勤时间。要到达办公室，你必须按给定次序乘坐 n 趟列车。另给你一个长度为 n 的整数数组 dist ，其中 dist[i] 表示第 i 趟列车的行驶距离（单位是千米）。

  每趟列车均只能在整点发车，所以你可能需要在两趟列车之间等待一段时间。

  例如，第 1 趟列车需要 1.5 小时，那你必须再等待 0.5 小时，搭乘在第 2 小时发车的第 2 趟列车。
  返回能满足你准时到达办公室所要求全部列车的 最小正整数 时速（单位：千米每小时），如果无法准时到达，则返回 -1 。

  生成的测试用例保证答案不超过 107 ，且 hour 的 小数点后最多存在两位数字 。

  示例 1：

  输入：dist = [1,3,2], hour = 6
  输出：1
  解释：速度为 1 时：
  - 第 1 趟列车运行需要 1/1 = 1 小时。
  - 由于是在整数时间到达，可以立即换乘在第 1 小时发车的列车。第 2 趟列车运行需要 3/1 = 3 小时。
  - 由于是在整数时间到达，可以立即换乘在第 4 小时发车的列车。第 3 趟列车运行需要 2/1 = 2 小时。
  - 你将会恰好在第 6 小时到达。
  示例 2：

  输入：dist = [1,3,2], hour = 2.7
  输出：3
  解释：速度为 3 时：
  - 第 1 趟列车运行需要 1/3 = 0.33333 小时。
  - 由于不是在整数时间到达，故需要等待至第 1 小时才能搭乘列车。第 2 趟列车运行需要 3/3 = 1 小时。
  - 由于是在整数时间到达，可以立即换乘在第 2 小时发车的列车。第 3 趟列车运行需要 2/3 = 0.66667 小时。
  - 你将会在第 2.66667 小时到达。
  示例 3：

  输入：dist = [1,3,2], hour = 1.9
  输出：-1
  解释：不可能准时到达，因为第 3 趟列车最早是在第 2 小时发车。
   

  提示：

  n == dist.length
  1 <= n <= 105
  1 <= dist[i] <= 105
  1 <= hour <= 109
  hours 中，小数点后最多存在两位数字

  来源：力扣（LeetCode）
  链接：https://leetcode.cn/problems/minimum-speed-to-arrive-on-time
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
 * @param {number[]} dist
 * @param {number} hour
 * @return {number}
 */
var minSpeedOnTime = function(dist, hour) {
  let l = 1;
  let r = Math.max(...dist) * 100; //  乘100让最后一趟通行时间必然小于0.01
  let ret = -1;
  while (l <= r) {
    const mid = (l + r) >>> 1;
    let temp = 0;
    for (let i = 0; i < dist.length; i += 1) {
      if (i !== dist.length - 1) {
        temp += Math.ceil(dist[i] / mid);
      } else {
        temp += dist[i] / mid;
      }
    }
    if (temp <= hour) {
      ret = mid;
      r = mid - 1;
    } else {
      l = mid + 1;
    }
  }
  return ret;
};

/**
 * 因为题意表示h最多有2位小数，也就是说h最小为0.01h
 * 换而言之，若最后一趟车通行距离为k，只需要速度为k * 100，即可使最后一趟车时间为 0.01h，满足题意
 * 上述场景出现在[1, 1, 10000]这样最后一趟车通行距离最大
 */