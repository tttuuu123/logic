/* 
  已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
  若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
  若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
  注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

  给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

  你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

  示例 1：

  输入：nums = [3,4,5,1,2]
  输出：1
  解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
  示例 2：

  输入：nums = [4,5,6,7,0,1,2]
  输出：0
  解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。
  示例 3：

  输入：nums = [11,13,15,17]
  输出：11
  解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
   

  提示：

  n == nums.length
  1 <= n <= 5000
  -5000 <= nums[i] <= 5000
  nums 中的所有整数 互不相同
  nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转


  来源：力扣（LeetCode）
  链接：https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
 * @param {number[]} nums
 * @return {number}
 */
var findMin = function(nums) {
  let l = 0;
  let r = nums.length - 1;
  while (l < r) {
    const mid = (l + r) >>> 1;
    if (nums[mid] < nums[r]) {
      r = mid;
    } else {
      // 如果nums[mid] === nums[r]，说明存在重复元素，而题意是不存在的～所以不需要考虑
      l = mid + 1;
    }
  }
  return nums[l];
};

/**
 * 因为原数组是排序的，所以折叠后，目标就是找原数组中第一个元素在折叠后数组中的的下标
 * 定义原数组第一个元素为n
 * 折叠后，n前面的所有元素都比n大，n后面的所有元素也比n大
 */
