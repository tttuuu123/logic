/* 
  给你一个整数数组 arr ，请你删除一个子数组（可以为空），使得 arr 中剩下的元素是 非递减 的。

  一个子数组指的是原数组中连续的一个子序列。

  请你返回满足题目要求的最短子数组的长度。

  示例 1：

  输入：arr = [1,2,3,10,4,2,3,5]
  输出：3
  解释：我们需要删除的最短子数组是 [10,4,2] ，长度为 3 。剩余元素形成非递减数组 [1,2,3,3,5] 。
  另一个正确的解为删除子数组 [3,10,4] 。
  示例 2：

  输入：arr = [5,4,3,2,1]
  输出：4
  解释：由于数组是严格递减的，我们只能保留一个元素。所以我们需要删除长度为 4 的子数组，要么删除 [5,4,3,2]，要么删除 [4,3,2,1]。
  示例 3：

  输入：arr = [1,2,3]
  输出：0
  解释：数组已经是非递减的了，我们不需要删除任何元素。
  示例 4：

  输入：arr = [1]
  输出：0
   
  提示：

  1 <= arr.length <= 10^5
  0 <= arr[i] <= 10^9

  来源：力扣（LeetCode）
  链接：https://leetcode.cn/problems/shortest-subarray-to-be-removed-to-make-array-sorted
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
 * @param {number[]} arr
 * @return {number}
 */
var findLengthOfShortestSubarray = function(arr) {
  const len = arr.length;
  let l = 0
  let r = len - 1;
  let ret = 0;
  while (l + 1 < len && arr[l + 1] >= arr[l]) l += 1; // 找出左侧最大非递减序列长度
  if (l === len - 1) return 0;
  while (r > 0 && arr[r - 1] <= arr[r]) r -= 1; // 找出右侧最大非递减序列长度
  ret = Math.min(r, len - (l + 1));
  let i = 0;
  let j = r;
  while (i <= l && j <= len - 1) {
    if (arr[i] <= arr[j]) {
      ret = Math.min(ret, j - (i + 1));
      i += 1;
    } else {
      j += 1;
    }
  }
  return ret;
};

/**
 * 分3种场景考虑
 * 1:
 * 删除右边n个元素即可满足条件
 * 那么就在左侧找出最大非递减序列长度，然后删掉剩下的
 * 2：
 * 删除左边n个元素即可满足条件
 * 那么就在右侧找出最大非递减序列长度，然后删掉剩下的
 * 3：
 * 删除中间某段区间
 * 那么就要在左侧找出一段连续非递减序列
 * 再在右侧找出一段连续非递减序列（且序列的第一个元素不小于左侧找出序列的最后一个元素）
 * 删除中间即可
 */
