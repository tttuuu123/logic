/* 
  一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

  'A' -> "1"
  'B' -> "2"
  ...
  'Z' -> "26"
  要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

  "AAJF" ，将消息分组为 (1 1 10 6)
  "KJF" ，将消息分组为 (11 10 6)
  注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

  给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

  题目数据保证答案肯定是一个 32 位 的整数。

  示例 1：

  输入：s = "12"
  输出：2
  解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
  示例 2：

  输入：s = "226"
  输出：3
  解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
  示例 3：

  输入：s = "0"
  输出：0
  解释：没有字符映射到以 0 开头的数字。
  含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
  由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
   

  提示：

  1 <= s.length <= 100
  s 只包含数字，并且可能包含前导零。

  来源：力扣（LeetCode）
  链接：https://leetcode.cn/problems/decode-ways
  著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
 * @param {string} s
 * @return {number}
 */
var numDecodings = function(s) {
  const dp = Array(s.length + 1).fill(0);
  // dp[0] 代表空字符串，可以解析出一个空字符串，所以是1
  dp[0] = 1;
  for (let i = 1; i < s.length + 1; i += 1) {
    // 若 s[i - 1] !== 0, 那么s[i - 1]可以单独解码成一个字母, 那么 dp[i] 可以加上 dp[i - 1]
    if (s[i - 1] !== '0') {
      dp[i] += dp[i - 1];
    }
    // 若s[i - 2] 和 s[i - 1] 可以一起解码成一个字母，那么 dp[i] 可以加上 dp[i - 2]
    if (i > 1 && (s[i - 2] === '1' || (s[i - 2] === '2' && s[i - 1] <= '6'))) {
      dp[i] += dp[i - 2];
    }
  }
  return dp[dp.length - 1];
};

/**
 * 有3种场景
 * 若s[n - 1] 和 s[n] 既可以单独 又有可以组合
 * 即满足 s[n - 1] = 1 或 （s[n - 1] = 2 且 s[n] 在 [0, 6] 之间）
 * dp[n] = dp[n - 1] + dp[n - 2]
 * 否则
 * 若 s[n] = 0
 * dp[n] = dp[n - 2]
 * 若 s[n] != 0
 * dp[n] = dp[n - 1]
 */