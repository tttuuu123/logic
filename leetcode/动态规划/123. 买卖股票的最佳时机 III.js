/* 
  给定一个数组，它的第 i 个元素是一支给定的　在第 i 天的价格。

  设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

  注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

  示例 1:

  输入：prices = [3,3,5,0,0,3,1,4]
  输出：6
  解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
  示例 2：

  输入：prices = [1,2,3,4,5]
  输出：4
  解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
  示例 3：

  输入：prices = [7,6,4,3,1] 
  输出：0 
  解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
  示例 4：

  输入：prices = [1]
  输出：0

  提示：

  1 <= prices.length <= 105
  0 <= prices[i] <= 105
*/

/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
  const dp = Array(prices.length).fill(0).map(() => Array(2).fill(0).map(() => Array(3).fill(0)));
  dp[0][1][0] = -prices[0];
  dp[0][1][1] = -prices[0];
  dp[0][1][2] = -prices[0];
  for (let i = 1; i < prices.length; i += 1) {
    dp[i][0][1] = Math.max(dp[i - 1][0][1], dp[i - 1][1][0] + prices[i]);
    dp[i][0][2] = Math.max(dp[i - 1][0][2], dp[i - 1][1][1] + prices[i]);
    dp[i][1][0] = Math.max(dp[i - 1][1][0], dp[i - 1][0][0] - prices[i]);
    dp[i][1][1] = Math.max(dp[i - 1][0][1] - prices[i], dp[i - 1][1][1]);
    dp[i][1][2] = Math.max(dp[i - 1][1][2], dp[i - 1][0][2] - prices[i]);
  }
  return dp[prices.length - 1][0][2];
};

/**
 * dp[i][j][k] 表示【第i天】 【（不）持有，0/1】【交易几次，0/1/2】最大盈利数
 * 
 * 第i天为未持且未交易过，利润一定是0
 * dp[i][0][0] = 0
 * 
 * 第i天未持有且交易过1次，那么要么是i-1天卖出，要么是i-1天持有且第i天卖出
 * dp[i][0][1] = Math.max(dp[i - 1][0][1], dp[i - 1][1][0] + prices[i])
 * 
 * 第i天未持有且交易过2次，那么是第i-1天交易过2次，要么是第i-1天持有交易过1次且第i天卖出
 * dp[i][0][2] = Math.max(dp[i - 1][0][2], dp[i - 1][1][1] + prices[i])
 * 
 * 第i天持有且未交易过，那么要么是第i-1天持有且未交易过，要么是第i-1天未持有第i天买入
 * dp[i][1][0] = Math.max(dp[i - 1][1][0], dp[i - 1][0][0] - prices[i])
 * 
 * 第i天持有且交易过一次，要么是第i-1天卖出且第i天买入，要么是第i-1天持有且交易过1次
 * dp[i][1][1] = Math.max(dp[i - 1][0][1] - prices[i], dp[i - 1][1][1])
 * 
 * 第i天持有且交易过2次，要么是第i-1天持有且交易过2次，要么是第i-1天未持有交易过2次且第i天买入
 * dp[i][1][2] = Math.max(dp[i - 1][1][2], dp[i - 1][0][2] - prices[i])
 */